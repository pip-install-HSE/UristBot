import logging
import os
import logging
import re

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.contrib.fsm_storage.mongo import MongoStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, \
    KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hlink, hide_link, link
from aiogram.types import InputFile

print(os.getenv)

questions = ['ü§ü –ü—Ä–æ—Ñ–∏–ª—å', 'üîç –ò—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å—é', 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç', '‚úä –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
documents = ['–î–æ–≥–æ–≤–æ—Ä –ø–æ –æ–∫–∞–∑–∞–Ω–∏—é —Ä–∞–±–æ—Ç']
contracts = ['–î–æ–≥–æ–≤–æ—Ä –ø–æ –æ–∫–∞–∑–∞–Ω–∏—é —É—Å–ª—É–≥',
             '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞', '–î–æ–≥–æ–≤–æ—Ä –ø–æ—Ä—É—á–µ–Ω–∏—è']

API_TOKEN = ''

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
# storage = MongoStorage('exchange_mongo')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

id_chat_support = 0


async def soft_state_finish(state: FSMContext):
    fields = ['action']
    data = await state.get_data()
    data = {key: value for key, value in data.items() if key not in fields}
    await state.set_data(data)
    await state.set_state(None)


@dp.message_handler(commands=['Start', 'Help'], state="*")
async def main_menu(
        message: [types.Message, types.CallbackQuery], state: FSMContext,
        message_text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è —é—Ä–∏—Å—Ç–æ–≤!\n'
                     '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:'):
    await soft_state_finish(state)
    await bot.send_message(
        chat_id=message.chat.id,
        text=message_text,
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton('ü§ü –ü—Ä–æ—Ñ–∏–ª—å')],
                [KeyboardButton('üîç –ò—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å—é')],
                [KeyboardButton('üìÑ –î–æ–∫—É–º–µ–Ω—Ç')],
                [KeyboardButton('‚úä –ü–æ–¥–¥–µ—Ä–∂–∫–∞')]
            ],
            resize_keyboard=True,
            one_time_keyboard=True),
        parse_mode="HTML",
        disable_web_page_preview=True
    )


# –ù–∞–∑–∞–¥ –µ—Å–ª–∏ –º—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞–∑–∞–¥ –∏–∑  –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
# 'ü§ü –ü—Ä–æ—Ñ–∏–ª—å', 'üîç –ò—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å—é', 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç', '‚úä –ü–æ–¥–¥–µ—Ä–∂–∫–∞'
@dp.callback_query_handler(
    text='‚óÄÔ∏è –ù–∞–∑–∞–¥',state=['ü§ü –ü—Ä–æ—Ñ–∏–ª—å',
                           'üîç –ò—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å—é','üìÑ –î–æ–∫—É–º–µ–Ω—Ç', '‚úä –ü–æ–¥–¥–µ—Ä–∂–∫–∞'])
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(action=None)
    await callback.message.delete()
    await main_menu(callback.message, state)


# –∫–æ–¥ –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(Text(equals=['ü§ü –ü—Ä–æ—Ñ–∏–ª—å']), state='*')
async def profile(message: types.Message, state: FSMContext):
    await state.update_data(action=message.text)
    await message.answer(
        text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: <b>–ö–æ–º–ø–∞–Ω–∏—è</b>\n'
             f'–†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã</b>',
        parse_mode='HTML',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        )
    )
    await state.set_state(message.text)


# –∫–æ–¥ –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ üîç –ò—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å—é
@dp.message_handler(Text(equals=['üîç –ò—Å–∫–∞—Ç—å —Å—Ç–∞—Ç—å—é']), state='*')
async def search_article(message: types.Message, state: FSMContext):
    await state.update_data(action=message.text)
    await message.answer(
        text=f'<b>*–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*</b>',
        parse_mode='HTML',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        )
    )
    await state.set_state(message.text)


# –∫–æ–¥ –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ üìÑ –î–æ–∫—É–º–µ–Ω—Ç
@dp.message_handler(Text(equals=['üìÑ –î–æ–∫—É–º–µ–Ω—Ç']), state='*')
async def select_document(message: types.Message, state: FSMContext):
    await state.update_data(action=message.text)
    await message.answer(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in documents + ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        ),
    )
    await state.set_state(message.text)


# –ù–∞–∑–∞–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
@dp.callback_query_handler(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', state=documents)
async def back_to_select_document(
        callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(document=None)
    await callback.message.edit_text(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in documents + ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        ),
    )
    await state.set_state((await state.get_data())['action'])


# –ö–æ–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –î–æ–∫—É–º–µ–Ω—Ç
@dp.callback_query_handler(text=documents, state=['üìÑ –î–æ–∫—É–º–µ–Ω—Ç'])
async def select_contract(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(document=callback.data)

    await callback.message.edit_text(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä:', parse_mode='HTML',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in contracts + ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚§¥Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            ]
        ),
    )
    await state.set_state(callback.data)


# –ö–æ–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏—Å—å –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', state=contracts)
async def back_to_select_contract(callback: types.CallbackQuery,
                                  state: FSMContext):
    await state.update_data(contract=None)

    await callback.message.edit_text(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä:', parse_mode='HTML',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in contracts + ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚§¥Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            ]
        ),
    )
    await state.set_state((await state.get_data())['document'])


# –ö–æ–¥ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–∑–¥–µ—Å—å –Ω–∞–¥–æ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å)
@dp.callback_query_handler(text=contracts, state=documents)
async def select_forward(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(contract=callback.data)

    await callback.message.edit_text(
        text=f'<b>*–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*</b>', parse_mode='HTML',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚§¥Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
            ]
        ),
    )
    await state.set_state(callback.data)


# –ö–æ–¥, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ ‚úä –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message_handler(Text(equals='‚úä –ü–æ–¥–¥–µ—Ä–∂–∫–∞'), state='*')
async def support(message: types.Message, state: FSMContext):
    await state.update_data(action=message.text)
    await message.answer(
        text='<b>*–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*</b>',
        parse_mode='HTML',
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=elem, callback_data=elem)]
                for elem in ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
            ]
        ))
    await state.set_state(message.text)


@dp.callback_query_handler(text="‚§¥Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state="*")
async def enter_NO_back_to_mian_menu(callback: types.CallbackQuery,
                                     state: FSMContext):
    await soft_state_finish(state)
    await callback.message.delete()
    await main_menu(callback.message, state)


#
# @dp.callback_query_handler(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", state="üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
# async def enter_NO_back_to_mian_menu(callback: types.CallbackQuery,
#                                      state: FSMContext):
#     await soft_state_finish(state)
#     await callback.message.delete()
#     await main_menu(callback.message, state)


@dp.message_handler(state='üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def support_message(message: types.Message, state: FSMContext):
    await main_menu(message, state,
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    user = message.from_user
    await bot.send_message(
        text=f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name}"
             f" {user.last_name if 'last_name' in user else ''}\n"
             f"username:  @{user.username if 'username' in user else None}\n"
             f"id: {user.id}\n\n"
             f"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {message.text}",
        chat_id=id_chat_support
    )


@dp.message_handler(lambda message: message.chat.id != message.from_user.id)
async def chats_handler(message: types.Message):
    if message.chat.id == id_chat_support:
        if 'reply_to_message' in message:
            user_id = re.findall(r"id: (\d+)",
                                 message.reply_to_message.text)[0]
            await bot.send_message(
                chat_id=user_id,
                text=f"<b>–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</b> "
                     + message.from_user.first_name
                + ' ' + message.from_user.last_name + ':' + '\n'
                f"{message.text}",
                parse_mode="HTML"
            )
            await message.reply(
                text='–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                reply=True
            )


@dp.callback_query_handler(state='*')
async def any_callback(callback: types.CallbackQuery, state: FSMContext):
    print('No one callback handler')
    print(f"{await state.get_state()=}")
    print(f"{callback.data=}")
    await callback.message.edit_reply_markup(InlineKeyboardMarkup())


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
